<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/aop
  	http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 开启注解 -->
	<mvc:annotation-driven />

	<context:property-placeholder  ignore-unresolvable="true" location="classpath:myssm.properties"/>

	<!-- 返回json 方法一 需要导入 fastjson.jar包 -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="false">
			<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
			<bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
	<util:properties id="APP_PROP" location="classpath:myssm.properties" local-override="true"/>

	<!--<context:component-scan/>标签是告诉Spring 来扫描指定包下的类，
	并注册被@Component，@Controller，@Service，@Repository等注解标记的组件。-->
	<context:annotation-config />
	<context:component-scan base-package="com.jk.*" />
	<!-- 通过在你的Spring的配置中引入下列元素来启用Spring对@AspectJ的支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!--prefix，定义了所需访问的文件路径前缀，
		suffix，表示要访问的文件的后缀，
		这里为 .jsp。那么，如果返回字符串是 xxx ，SpringMVC就会找到 /xxx.jsp 文件-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/page/" />
		<property name="suffix" value=".jsp" />
	</bean>


	<!-- 将静态文件指定到某个特殊的文件夹中统一处理 -->
	<!--加上此配置后tomcat启动一直报错，……-->
	<!--原因：
		1、有可能是修改后未重新打包，导致修改不生效
		2、spring版本较低 之前是3.1.1,现在是4.2.6
		3、mvc:resources 目录配置有问题，现在是把 /static/**——》/static/
		    意思是所有的页面引用到/static/**的资源都从/static/里面进行查找-->
	<!--<mvc:resources location="/static/" mapping="/image/**" />-->
	<mvc:resources mapping="/static/**" location="/static/"/>

	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="${web.maxUploadSize}" />
	</bean>

	<!--
	  使用Shiro自带的JdbcRealm类
      指定密码匹配所需要用到的加密对象
	  指定存储用户、角色、权限许可的数据源及相关查询语句
	 -->
	<bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<!--<property name="credentialsMatcher" ref="credentialsMatcher"></property>-->
		<property name="permissionsLookupEnabled" value="true"></property>
		<property name="dataSource" ref="druidDataSource"></property>
		<!--<property name="authenticationQuery"
				  value="SELECT password FROM sec_user WHERE user_name = ?"></property>
		<property name="userRolesQuery"
				  value="SELECT role_name from sec_user_role left join sec_role using(role_id) left join sec_user using(user_id) WHERE user_name = ?"></property>
		<property name="permissionsQuery"
				  value="SELECT permission_name FROM sec_role_permission left join sec_role using(role_id) left join sec_permission using(permission_id) WHERE role_name = ?"></property>-->
	</bean>

	<!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
	<!--<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"></bean>-->
	<!-- 缓存管理 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>

	<!-- Shiro安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jdbcRealm"></property>
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>

	<!--
	   Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行
	   Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持
	-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口，这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/welcome.jsp"></property>
		<!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
		 <property name="successUrl" value="/" ></property>
		<!-- 用户访问未对其授权的资源时，所显示的连接 -->
		<property name="unauthorizedUrl" value="/"></property>
		<property name="filterChainDefinitions">
			<value>
				/security/*=anon
				/tag=authc
			</value>
		</property>
	</bean>

	<!--
	   开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类，
	   并在必要时进行安全逻辑验证
	-->
	<!--
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	-->


</beans>