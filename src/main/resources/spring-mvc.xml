<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/aop
  	http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 开启注解 -->
	<mvc:annotation-driven />

	<context:property-placeholder  ignore-unresolvable="true" location="classpath:myssm.properties"/>

	<!-- 返回json 方法一 需要导入 fastjson.jar包 -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="false">
			<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
			<bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
	<util:properties id="APP_PROP" location="classpath:myssm.properties" local-override="true"/>

	<!--<context:component-scan/>标签是告诉Spring 来扫描指定包下的类，
	并注册被@Component，@Controller，@Service，@Repository等注解标记的组件。-->
	<context:annotation-config />
	<context:component-scan base-package="com.jk.*" />
	<!-- 通过在你的Spring的配置中引入下列元素来启用Spring对@AspectJ的支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!--prefix，定义了所需访问的文件路径前缀，
		suffix，表示要访问的文件的后缀，
		这里为 .jsp。那么，如果返回字符串是 xxx ，SpringMVC就会找到 /xxx.jsp 文件-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/page/" />
		<property name="suffix" value=".jsp" />
	</bean>


	<!-- 将静态文件指定到某个特殊的文件夹中统一处理 -->
	<!--加上此配置后tomcat启动一直报错，……-->
	<!--原因：
		1、有可能是修改后未重新打包，导致修改不生效
		2、spring版本较低 之前是3.1.1,现在是4.2.6
		3、mvc:resources 目录配置有问题，现在是把 /static/**——》/static/
		    意思是所有的页面引用到/static/**的资源都从/static/里面进行查找-->
	<!--<mvc:resources location="/static/" mapping="/image/**" />-->
	<mvc:resources mapping="/static/**" location="/static/"/>

	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="${web.maxUploadSize}" />
	</bean>
</beans>