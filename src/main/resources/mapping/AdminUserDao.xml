<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--报dao层缓存错误时，先检查有没有启动redis-->

<!--Mapper元素只有一个属性namespace，
它有两个作用：一是用于区分不同的mapper（在不同的mapper文件里，子元素的id可以相同，mybatis通过namespace和子元素的id联合区分），
二是与接口关联（应用程序通过接口访问mybatis时，mybatis通过接口的完整名称查找对应的mapper配置，因此namespace的命名务必小心一定要与接口同名）-->

<!-- 通用方法：insert，delete，updateEntity，queryList4Page，queryEntity -->
<mapper namespace="com.jk.dao.UserDao">
    <!-- 缓存 -->
    <!--<cache eviction="LRU" type="com.jk.redis.MybatisRedisCache" />-->

    <insert id="insert" parameterType="com.jk.model.AdminUsersEntity" >
        <selectKey resultType="java.lang.String" order="AFTER" keyProperty="id"><!--插入后返回主键Id-->
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into sys_users
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="username != null" >
                username,
            </if>
            <if test="password != null" >
                password,
            </if>
            <if test="passwordSalt != null" >
                password_salt,
            </if>
            <if test="locked != null" >
                locked,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="username != null" >
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="passwordSalt != null" >
                #{passwordSalt,jdbcType=VARCHAR},
            </if>
            <if test="locked != null" >
                #{locked,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <select id="queryList4Page" parameterType="com.jk.model.AdminUsersEntity" resultType="com.jk.model.AdminUsersEntity">
        SELECT u.*,r.role_name as roleName FROM sys_users u
        LEFT JOIN sys_user_role u_r on u.id=u_r.sys_user_id
        LEFT JOIN sys_role r on u_r.sys_role_id=r.id
    </select>

    <select id="queryEntity" parameterType="com.jk.model.AdminUsersEntity" resultType="com.jk.model.AdminUsersEntity">
        SELECT * FROM sys_users WHERE 1=1
        <if test="id != null">
          AND id=#{id}
        </if>
        <if test=" username != null">
            AND username=#{username}
        </if>
    </select>
    <update id="updateEntity" parameterType="com.jk.model.AdminUsersEntity" >
        update sys_users
        <set >
            <if test="password != null" >
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="passwordSalt != null" >
                password_salt = #{passwordSalt,jdbcType=VARCHAR},
            </if>
            <if test="locked != null" >
                locked = #{locked,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <delete id="deleteUserAndRole" parameterType="com.jk.model.AdminUserAndRoleEntity" >
        delete from sys_user_role where sys_user_id = #{sysUserId,jdbcType=VARCHAR}
    </delete>

    <insert id="updateUserAndRole" parameterType="com.jk.model.AdminUserAndRoleEntity" >
        insert into sys_user_role
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="sysUserId != null" >
                sys_user_id,
            </if>
            <if test="sysRoleId != null" >
                sys_role_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="sysUserId != null" >
                #{sysUserId,jdbcType=VARCHAR},
            </if>
            <if test="sysRoleId != null" >
                #{sysRoleId,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

</mapper>