<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd" default-lazy-init="true">

	<description>Shiro Configuration</description>

	<!--
	  使用Shiro自带的JdbcRealm类
      指定密码匹配所需要用到的加密对象
	  指定存储用户、角色、权限许可的数据源及相关查询语句
	 -->
	<bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher"></property><!--密码加密-->
		<property name="saltStyle" value="COLUMN" /><!--密码加盐方式-->
		<property name="permissionsLookupEnabled" value="true"></property>
		<property name="dataSource" ref="druidDataSource"></property>
		<!--自定义表，需要更改下面表明，建表格式由shiro原表复制后重命名即可，再自行添加所需字段-->
		<property name="authenticationQuery"
				  value="select password,password_salt from sys_users where username = ?"></property>
		<property name="userRolesQuery"
				  value="select A.sys_role_id from sys_user_role A
				  left join sys_users B on A.sys_user_id=B.id where username = ? and A.sys_role_id is not null"></property>
		<property name="permissionsQuery"
				  value="SELECT sys_permission as permission FROM sys_role_permission A WHERE sys_role_id = ? and sys_permission is not null"></property>
	</bean>

	<!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher">
		<property name="hashAlgorithmName" value="md5"></property><!--指定hash算法为MD5；-->
		<property name="hashIterations" value="2"></property><!--指定散列次数为2次；-->
		<property name="storedCredentialsHexEncoded" value="true"></property><!--指定Hash散列值使用Hex加密存储-->
	</bean>
	<!-- myAuthorRealm实现 -->
	<!--<bean id="myAuthorRealm" class="com.jk.shiro.MyAuthorRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />&lt;!&ndash;密码加密&ndash;&gt;
	</bean>-->

	<!-- 缓存管理 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>

	<!-- Shiro安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realms">
			<list>
				<!--<ref bean="myAuthorRealm"/>-->
				<ref bean="jdbcRealm"/>
			</list>

		</property>

		<property name="cacheManager" ref="cacheManager"></property>
	</bean>

	<!--
	   Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行
	   Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持
	   以Bean结尾，表示它是一个Bean，不同于普通Bean的是：它是实现了FactoryBean<T>接口的Bean，
	   根据该Bean的ID从BeanFactory中获取的实际上是FactoryBean的getObject()返回的对象，ShiroFilterFactoryBean实现了BeanFactory接口，
	   所以spring在获取ShiroFilterFactoryBean时，返回的是ShiroFilterFactoryBean的getObject()方法，
	-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口，这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面
		源码中的applyLoginUrlIfNecessary，就是把DefaultFilter中属于AccessControlFilter 访问控制过滤器 中，
		value默认为/login.jsp 的值换成/k/index/loginView.do-->
		<property name="loginUrl" value="/k/index/loginView.do"></property>
		<!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码)
		源码中的applyLoginUrlIfNecessary，就是把DefaultFilter中属于AuthenticationFilter 认证过滤器 中，
		value默认为/ 的值换成/k/index/loginView.do-->
		<property name="successUrl" value="/k/index/index.do" ></property>
		<!-- 用户访问未对其授权的资源时，所显示的连接
		源码中的applyLoginUrlIfNecessary，就是把DefaultFilter中属于AuthorizationFilter 授权过滤器 中，
		value默认为null 的值换成 -->
		<property name="unauthorizedUrl" value="/k/index/nopermiss.do"></property>

		<property name="filterChainDefinitions">
			<!--拦截器的优先级：从上到下，从左到右，如果有匹配的拦截器就会阻断并返回-->
			<value>
				/k/index/login.do=anon
				/k/index/logout.do=logout
				/k/**=authc
			</value>
		</property>
	</bean>

	<!--
	   开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类，
	   并在必要时进行安全逻辑验证
	-->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>

</beans>